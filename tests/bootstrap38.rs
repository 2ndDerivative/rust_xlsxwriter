// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0 Copyright 2022, John McNamara,
// jmcnamara@cpan.org

use rust_xlsxwriter::{Workbook, XlsxError};
use std::collections::HashSet;

mod common;

// Test case to demonstrate writing data with XML escapes
fn create_new_xlsx_file(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new(filename);
    let worksheet = workbook.add_worksheet();

    worksheet.write_string_only(0, 0, "Foo <&> bar")?;
    worksheet.write_formula_only(1, 0, r#"=LEN("1>2""&""2>1")"#)?;
    worksheet.set_formula_result(1, 0, "9");

    workbook.close()?;

    Ok(())
}

#[test]
fn bootstrap38_write_data_with_escapes() {
    let testcase = "bootstrap38";

    let mut ignore_files: HashSet<&str> = HashSet::new();
    ignore_files.insert("xl/calcChain.xml");
    ignore_files.insert("[Content_Types].xml");
    ignore_files.insert("xl/_rels/workbook.xml.rels");

    let (excel_file, xlsxwriter_file) = common::get_xlsx_filenames(testcase);
    _ = create_new_xlsx_file(&xlsxwriter_file);
    common::assert_eq_most(&excel_file, &xlsxwriter_file, &ignore_files);
    common::remove_test_xlsx_file(&xlsxwriter_file);
}
