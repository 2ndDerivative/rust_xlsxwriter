// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0 Copyright 2022, John McNamara,
// jmcnamara@cpan.org

use rust_xlsxwriter::{Workbook, XlsxError};
use serial_test::serial;

mod common;

// Test case to demonstrate creating a basic file with user defined column.
fn create_new_xlsx_file(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new(filename);
    let worksheet = workbook.add_worksheet();

    worksheet.set_column_width(2, 1, 6.86)?; // Reversed first/last col.
    worksheet.set_column_width(0, 0, 14)?; // Unsorted order.
    worksheet.set_column_width(3, 5, 0.92)?;

    worksheet.write_number_only(8, 0, 123)?; // A cell to test dimensions.

    workbook.close()?;

    Ok(())
}

// Test case to demonstrate creating a basic file with user defined column.
fn create_new_xlsx_file_pixels(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new(filename);
    let worksheet = workbook.add_worksheet();

    worksheet.set_column_width_pixels(2, 1, 53)?; // Reversed first/last col.
    worksheet.set_column_width_pixels(0, 0, 103)?; // Unsorted order.
    worksheet.set_column_width_pixels(3, 5, 11)?;

    worksheet.write_number_only(8, 0, 123)?; // A cell to test dimensions.

    workbook.close()?;

    Ok(())
}

#[test]
#[serial]
fn bootstrap25_set_column() {
    let testcase = "bootstrap25";

    let (excel_file, xlsxwriter_file) = common::get_xlsx_filenames(testcase);
    _ = create_new_xlsx_file(&xlsxwriter_file);
    common::assert_eq(&excel_file, &xlsxwriter_file);
    common::remove_test_xlsx_file(&xlsxwriter_file);
}

#[test]
#[serial]
fn bootstrap25_set_column_pixels() {
    let testcase = "bootstrap25";

    let (excel_file, xlsxwriter_file) = common::get_xlsx_filenames(testcase);
    _ = create_new_xlsx_file_pixels(&xlsxwriter_file);
    common::assert_eq(&excel_file, &xlsxwriter_file);
    common::remove_test_xlsx_file(&xlsxwriter_file);
}
