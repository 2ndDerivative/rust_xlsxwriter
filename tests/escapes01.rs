// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0 Copyright 2022, John McNamara,
// jmcnamara@cpan.org

use rust_xlsxwriter::{Workbook, XlsxError};

mod common;

// Test strings that need XML escaping.
fn create_new_xlsx_file(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();

    let worksheet = workbook.add_worksheet().set_name("5&4")?;

    worksheet
        .write_formula_only(0, 0, r#"=IF(1>2,0,1)"#)?
        .set_formula_result(0, 0, "1");
    worksheet
        .write_formula_only(1, 0, r#"=CONCATENATE("'","<>&")"#)?
        .set_formula_result(1, 0, "'<>&");
    worksheet
        .write_formula_only(2, 0, r#"=1&"b""#)?
        .set_formula_result(2, 0, "1b");
    worksheet
        .write_formula_only(3, 0, r#"="'""#)?
        .set_formula_result(3, 0, r#"'"#);
    worksheet
        .write_formula_only(4, 0, r#"="""""#)?
        .set_formula_result(4, 0, r#"""#);
    worksheet
        .write_formula_only(5, 0, r#"="&" & "&""#)?
        .set_formula_result(5, 0, "&&");

    worksheet.write_string_only(7, 0, r#""&<>"#)?;

    workbook.save(filename)?;

    Ok(())
}

#[test]
fn test_escapes01() {
    let test_runner = common::TestRunner::new("escapes01")
        .ignore_calc_chain()
        .initialize();

    _ = create_new_xlsx_file(test_runner.output_file());

    test_runner.assert_eq();
    test_runner.cleanup();
}
