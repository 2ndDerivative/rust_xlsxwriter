// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0 Copyright 2022, John McNamara,
// jmcnamara@cpan.org

use rust_xlsxwriter::{Format, Workbook, XlsxError};
use std::collections::HashSet;

mod common;

// Test case to test array formulas, with a format.
//
fn create_new_xlsx_file(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new(filename);

    let worksheet = workbook.add_worksheet();
    let bold = Format::new().set_bold();

    worksheet.write_array_formula(0, 0, 2, 0, "=SUM(B1:C1*B2:C2)", &bold)?;

    worksheet.write_number_only(0, 1, 0)?;
    worksheet.write_number_only(1, 1, 0)?;
    worksheet.write_number_only(2, 1, 0)?;
    worksheet.write_number_only(0, 2, 0)?;
    worksheet.write_number_only(1, 2, 0)?;
    worksheet.write_number_only(2, 2, 0)?;

    workbook.close()?;

    Ok(())
}

#[test]
fn test_array_formula02() {
    let testcase = "array_formula02";

    let mut ignore_files: HashSet<&str> = HashSet::new();
    ignore_files.insert("xl/calcChain.xml");
    ignore_files.insert("[Content_Types].xml");
    ignore_files.insert("xl/_rels/workbook.xml.rels");

    let (excel_file, xlsxwriter_file) = common::get_xlsx_filenames(testcase);
    _ = create_new_xlsx_file(&xlsxwriter_file);
    common::assert_eq_most(&excel_file, &xlsxwriter_file, &ignore_files);
    common::remove_test_xlsx_file(&xlsxwriter_file);
}
