// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0 Copyright 2022, John McNamara,
// jmcnamara@cpan.org

use rust_xlsxwriter::{Workbook, XlsxError};

mod common;

// Test case to demonstrate handling NaN and Inf numbers. For now these are
// handled as strings but at a latter stage them may be stored as Excel error
// types.
fn create_new_xlsx_file(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new(filename);
    let worksheet = workbook.add_worksheet();

    worksheet.write_number_only(0, 0, f64::NAN)?;
    worksheet.write_number_only(1, 0, f64::INFINITY)?;
    worksheet.write_number_only(2, 0, f64::NEG_INFINITY)?;

    worksheet.write_string_only(1, 0, "#DIV/0!")?;
    worksheet.write_string_only(2, 0, "#DIV/0!")?;

    workbook.close()?;

    Ok(())
}

#[test]
fn bootstrap16_test_nan() {
    let testcase = "bootstrap16";

    let (excel_file, xlsxwriter_file) = common::get_xlsx_filenames(testcase);
    _ = create_new_xlsx_file(&xlsxwriter_file);
    common::assert_eq(&excel_file, &xlsxwriter_file);
    common::remove_test_xlsx_file(&xlsxwriter_file);
}
